#!/bin/bash
#
#    (C) Copyright 2017 CEA LIST. All Rights Reserved.
#    Contributor(s): Cingulata team (formerly Armadillo team)
#
#    This software is governed by the CeCILL-C license under French law and
#    abiding by the rules of distribution of free software.  You can  use,
#    modify and/ or redistribute the software under the terms of the CeCILL-C
#    license as circulated by CEA, CNRS and INRIA at the following URL
#    "http://www.cecill.info".
#
#    As a counterpart to the access to the source code and  rights to copy,
#    modify and redistribute granted by the license, users are provided only
#    with a limited warranty  and the software's author,  the holder of the
#    economic rights,  and the successive licensors  have only  limited
#    liability.
#
#    The fact that you are presently reading this means that you have had
#    knowledge of the CeCILL-C license and that you accept its terms.
#
#

# Generation of bench results using different options of crit path opt


# SCRIPT_DIR is this directory of this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# lib file is in the same directory
LIB_FILE=$SCRIPT_DIR/lib_red.genlib

# Set ABC path
ABC_PATH=@ABC_PATH@
ABC_SRC_PATH=@ABC_SRC_PATH@

# In case of error print error OPT_CMD_PARAM and exit
exitOnErr()
{
  if [ ${?} -ne 0 ]; then
    unset -v DFLAGS
    echo "error: ${1} failed"
    exit 1
  fi
}

# usage function : print usage and exit
usage(){
 cat >&2 <<END
usage: $0 -i <FILE> -o <FILE> [OPTIONS]

Options:
  -i <FILE>        Input blif file
  -o <FILE>        Output blif file
  -c <STRING>	   ABC command
  -v 			   Verbose
END
exit 1
}


# Function that execute ABC with a command string as parameter
abc_optimize(){
	cp $ABC_SRC_PATH/abc.rc .

	$ABC_PATH/abc -c "$1"
	exitOnErr "Abc execution failed"

	rm abc.rc
}

VERBOSE=0
#parse parameters
while [[ $# -gt 0 ]]
do
# key is current argument
key="$1"
case $key in
    -i) # case input blif file
    INPUTBLIFFILE="$2" # set INPUTBLIFFILE with argument value
    shift # past argument
    shift # past value
    ;;
    -o) # case output blif file
    OUTPUTBLIFFILE="$2" # set OUTPUTBLIFFILE with argument value
    shift # past argument
    shift # past value
    ;;
    -c) # case OPT_CMD_PARAM option, set abc command directly with a string
    OPT_CMD_PARAM="$2" # set OPT_CMD_PARAM with argument value
    shift # past argument
    shift # past value
    ;;
    -v) #case verbose
    VERBOSE=1 # set VERBOSE to 1
    shift # past argument
    ;;
    *)    # unknown option
	shift # past argument
	;;
esac
done

# if no input file is set, print usage and exit
if test -z "$INPUTBLIFFILE"; then
	usage
fi
# if no output file is set, print usage and exit
if test -z "$OUTPUTBLIFFILE"; then
	usage
fi

if [ $VERBOSE = 1 ]; then
  echo "Input blif file: " $INPUTBLIFFILE
  echo "Output blif file:" $OUTPUTBLIFFILE
  echo "ABC path:" $ABC_PATH
  echo "Lib file:" $LIB_FILE
fi

# read genlib
OPT_CMD="r $LIB_FILE;"
#read input blif
OPT_CMD=$OPT_CMD"r $INPUTBLIFFILE;"

#if OPT_CMD_PARAM is not set, then define default commands
if test -z "$OPT_CMD_PARAM"; then
	# if verbose, execute print stats command
	if [ $VERBOSE = 1 ]; then
		OPT_CMD_PARAM=$OPT_CMD_PARAM"ps;"
	fi
	# execute resyn2 command, optimization of circuit size
  OPT_CMD_PARAM=$OPT_CMD_PARAM"recadd3;"
  OPT_CMD_PARAM=$OPT_CMD_PARAM"resyn2rs;"
	# execute map command, map nodes to gate defined in genlib
	OPT_CMD_PARAM=$OPT_CMD_PARAM"map;"
	# if verbose, execute print_stats command
	if [ $VERBOSE = 1 ]; then
		OPT_CMD_PARAM=$OPT_CMD_PARAM"ps;"
	fi
	# execute unmap command: get blif as truth tables
	OPT_CMD_PARAM=$OPT_CMD_PARAM"unmap;"
fi

#CAT COMMAND to OPT_CMD_PARAM
OPT_CMD=$OPT_CMD";"$OPT_CMD_PARAM";"
# write output blif
OPT_CMD=$OPT_CMD"write_blif $OUTPUTBLIFFILE"

# Proceed optimization
abc_optimize "$OPT_CMD"
